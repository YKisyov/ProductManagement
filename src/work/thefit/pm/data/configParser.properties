# Designed to easy the creation of Products and Reviews out of comma separate values.
# Used for defining how to manipulate CSV data. Initially it will be used
# on simple String objects to simulate and test the feature, Later on we
# will get this data out of files stored on the system.
#
# This file is treated as part of a Resource Bundle within the app and will be released and deployed as inseparable
# part of the app. This is to avoid OS specific paths, file permissions, use overwriting this file, etc.
# As a result configParser shall not be treated as an OS specific file. So NO USE of java.util.Properties to call this resource.

# The review pattern represents the following structure of text elements:
#       - Product Id (integer number)
#       - Review rating (integer number)
#       - Review Comment (text)
#
# For example: "101, 4, Nice hot cup of tea."

# The product pattern represents the following structure of text elements:
#       - Product Type (F for Food, D for Drink)
#       - Product Id (integer number)
#       - Product Name (text)
#       - Product Price (floating point number)
#       - Product Rating (integer number)
#       - Product Best-before-Date (data in ISO format: yyyy-mm-dd)
#
# For example: "D, 101, Tea, 1.99, 0, 2024-01-24"
# or: "F, 103, Cake, 3.99, 0, 2024-03-03"

# TODO use some more advanced formatting to avoid CSV that might mess with commas used to denote value formats for countries like Bulgaria and France
# where comma is used as decimal separator. To avoid data shapes that might interfere we will not use any specific Locale.

product.data.format={0},{1},{2},{3},{4},{5}
review.data.format={0},{1},{2}
